function init(self)
	print(msg.url())
	msg.post(".", "acquire_input_focus")
	self.v = 50
	self.vel = vmath.vector3()
	self.health = 100
	self.correction = vmath.vector3()
	self.touch = vmath.vector3()
	msg.post("default:/camera#camera1", "follow")
end

function update(self, dt)
	msg.post("default:/map#astar", "astar")
	local pos = go.get_position()
	pos = pos + self.vel * dt 
	go.set_position(pos)
	self.vel.x = 0
	self.vel.y = 0
	self.correction = vmath.vector3()

	if self.health <= 0 then
		msg.post("main:/death#death", "display")
	end
	if self.touch.x > go.get_position().x-go.get_position("camera").x then
		sprite.set_hflip("#player", false)
	else
		sprite.set_hflip("#player", true)
	end
end

function on_input(self, action_id, action)

	if action_id == hash("up") then
		self.vel.y = self.v
	elseif action_id == hash("down") then
		self.vel.y = -self.v
	elseif action_id == hash("left") then
		self.vel.x = -self.v
	elseif action_id == hash("right") then
		self.vel.x = self.v
	elseif action_id == hash("pew pew") and action.released then
		--gets the position the bullet is aimed at
		local to = go.get_position() - go.get_position("camera")
		local from = vmath.vector3(action.x + 4, action.y + 4, 0)
		--sets the rotation to the angle to the target
		local angle = math.atan2(to.x - from.x, from.y - to.y)
		local rotation = vmath.quat_rotation_z(angle)
		local position = go.get_position() + vmath.rotate(rotation, vmath.vector3(0, 0, 0))
		local to = position + vmath.rotate(rotation, vmath.vector3(0, 1000, 0))
		--creates a bullet and moves it towards target
		local bullet = factory.create("#bulletFactory", position, rotation)
		go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, 4)
	end
	if not action_id then
		self.touch = action
	end
end


function on_message(self, message_id, message, sender)

	if message_id == hash("contact_point_response") then
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end 
	elseif message_id == hash("damage") then
		self.health = self.health - message.damage
		print(self.health)
		damage(self)
	end
end

function damage(self)
	msg.post("main:/ui#ui", "damage", {health=self.health})
end